generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                   @id @default(autoincrement())
  email             String                @unique
  name              String?
  phone             String?
  address           String? 
  isAuth            Boolean               @default(false) 
  role              Role                  @default(USER) 
  forms             Form[]
  responses         DisasterFormResponse[]
}

model Event {
  id                Int                   @id @default(autoincrement())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  description       String
  title             String
  adresses          EventsOnAddresses[]
  forms             Form[]
  disasterQuestions DisasterFormQuestion[]
}

model Form {
  id                Int                   @id @default(autoincrement())
  
  userId            Int
  user              User                  @relation(fields: [userId], references: [id])

  eventId           Int         
  event             Event                 @relation(fields: [eventId], references: [id])

  impacted          Boolean?  
  residentName      String?
  residentPhone     String?
  residentEmail     String?
  primaryLanguage   String?
  needHelp          Boolean?
  roofDamaged       Boolean?
  floodWaterHeight  String?
  ableToStayHome    Boolean?
}

model Address {
  id                Int                   @id @default(autoincrement())
  censusBlock       String
  number            String
  street            String
  type              String
  city              String
  state             String
  zipCode           String
  events            EventsOnAddresses[]
}

model EventsOnAddresses {
  id                Int                   @id @default(autoincrement()) 
  event             Event                 @relation(fields: [eventId], references: [id])
  eventId           Int                   // relation scalar field (used in the `@relation` attribute above)
  address           Address               @relation(fields: [addressId], references: [id])
  addressId         Int                   // relation scalar field (used in the `@relation` attribute above)
  assignedAt        DateTime              @default(now())
  assignedBy        String
  formResponse      DisasterFormResponse?

  //@@id([eventId, addressId])
}

model DisasterFormQuestion {
  id                Int                   @id @default(autoincrement())            
  sequence          Int
  field             String
  descriptionOne    String
  descriptionTwo    String
  questionType      Int
  validation        String
  require           Boolean
  options           String[]
  eventId           Int                   @unique
  answers           DisasterFormAnswer[]       
  event             Event                 @relation(fields: [eventId], references: [id])  
}

model DisasterFormResponse {
  id                Int                   @id @default(autoincrement()) 
  volunteerId       Int                   @unique
  eventOnAddressId  Int                   @unique
  volunteer         User                  @relation(fields: [volunteerId], references: [id])
  eventOnAddress    EventsOnAddresses     @relation(fields: [eventOnAddressId], references: [id])
  answers           DisasterFormAnswer[] 
} 

model DisasterFormAnswer {
  id                Int                   @id @default(autoincrement()) 
  answer            String
  formQuestionId    Int                   @unique
  formResponseId    Int                   @unique
  formQuestion      DisasterFormQuestion  @relation(fields: [formQuestionId], references: [id])
  formResponse      DisasterFormResponse  @relation(fields: [formResponseId], references: [id])
} 

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
